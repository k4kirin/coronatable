{"version":3,"sources":["Author.js","Table.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Author","class","href","React","Component","Table","props","state","error","isLoaded","items","curCol","sortBy","n","first","second","x","y","rows","document","getElementById","prevRow","getElementsByTagName","curRow","innerHTML","localeCompare","Number","start","end","i","table","newStart","sorted","length","this","setState","compare","parentNode","insertBefore","console","log","sortTable","fetch","API","then","res","json","result","Countries","fetchApi","str","substring","window","location","reload","message","dateParse","Date","style","border","id","onClick","arrow","map","Country","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Header","className","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a335a4bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass Author extends React.Component{\r\n\trender(){\r\n\t\treturn(<div class=\"author\">\r\n\tMade by <a href=\"http://k4kirin.github.io\">k4kirin</a>\r\n\t\t</div>);\r\n\t}\r\n}\r\n  \r\nexport default Author","/*\n\ncd desktop/coding/coronatable\n\nnpm start\n\ngit add .\n\ngit commit\n\ngit push origin master\n\n*/\n\nimport React, { Component } from 'react'\nimport './App.css';\n\nconst API = 'https://api.covid19api.com/';\nconst DEFAULT_QUERY = 'summary';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n\t  curCol: 0,\n\t  sortBy: 0, //0=ascending\n    };\n  }\n  compare(n,first,second){\n\t\tvar table = document.getElementById(\"coronatable\");\n\t\tvar rows = table.rows;\n\t\tvar prevRow = rows[first].getElementsByTagName(\"TD\")[n];\n\t\tvar curRow = rows[second].getElementsByTagName(\"TD\")[n];\n\t\tvar x,y;\n\t\tif(n == 0){\n\t\t\tx = prevRow.innerHTML.localeCompare(curRow.innerHTML);\n\t\t\ty = 0;\n\t\t}\n\t\telse{\n\t\t\tx = Number(prevRow.innerHTML);\n\t\t\ty = Number(curRow.innerHTML);\n\t\t}\n\t\treturn x<y;\n\t}\n  sortTable(n,start,end){\n\tif(end==start)return;\n\tvar i;\n\tvar table = document.getElementById(\"coronatable\");\n\tvar rows = table.rows;\n\tvar newStart = Number(start);\n\tvar sorted = true;\n\t\n\tif(start==2 && end==table.rows.length){\n\t\tthis.setState({\n\t\t\tcurCol: n,\n\t\t\tsortBy: 1,\n\t\t});\n\t}\n\tfor(i = start+1;i<end;i++){\n\t\tif(this.compare(n,i-1,i)){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(sorted){\n\t\tif(start==2 && end==table.rows.length){\n\t\t\tfor(i=3;i<table.rows.length;i++){\n\t\t\t\trows[2].parentNode.insertBefore(rows[i], rows[2]);\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tsortBy: 1-this.state.sortBy,\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\tfor (i = start+1;i < end;i++){\n\t\tif(this.compare(n,newStart,i)){\n\t\t\trows[start].parentNode.insertBefore(rows[i], rows[start]);\n\t\t\tnewStart++;\n\t\t}\n\t}\n\tconsole.log(newStart,start,end);\n\tthis.sortTable(n,start,newStart);\n\tthis.sortTable(n,newStart+1,end);\n  }\n  \n fetchApi(){\n    fetch(API + DEFAULT_QUERY)\n\t.then(res => res.json())\n\t.then(\n\t\t(result) => {\n\t\t  this.setState({\n\t\t\tisLoaded: true,\n\t\t\titems: result.Countries\n\t\t  });\n\t\t},\n\t\t(error) => {\n\t\t  this.setState({\n\t\t\tisLoaded: true,\n\t\t\terror\n\t\t  });\n\t\t}\n\t)\n }\n  componentDidMount() {\n\t  this.fetchApi();\n  }\n  arrow(n){\n\t  if(this.state.curCol == n){\n\t\t  if(this.state.sortBy == 1)\n\t\t\t  return \"▼\";\n\t\t  else\n\t\t\t  return \"▲\";\n\t  }\n  }\n  dateParse(str){\n\t  return str.substring(0,10)+\" \"+str.substring(12,19)+\" GMT\";\n  }\n\trender() {\n\t\tconst { error, isLoaded, items } = this.state;\n\t\tif (error) {\n\t\t\twindow.location.reload()\n\t\t\treturn <div>Reloading. Error: {error.message}</div>;\n\t\t} else if (!isLoaded) {\n\t\t\treturn <div>Loading...</div>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\tLast updated: {this.dateParse(items[0].Date)}\n\t\t\t\t\t<table style={{border: \"1px solid white\"}} id=\"coronatable\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(0,2,document.getElementById(\"coronatable\").rows.length)}>Country</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(1,2,document.getElementById(\"coronatable\").rows.length)}>New Confirmed</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(2,2,document.getElementById(\"coronatable\").rows.length)}>Total Confirmed</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(3,2,document.getElementById(\"coronatable\").rows.length)}>New Deaths</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(4,2,document.getElementById(\"coronatable\").rows.length)}>Total Deaths</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(5,2,document.getElementById(\"coronatable\").rows.length)}>New Recovered</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(6,2,document.getElementById(\"coronatable\").rows.length)}>Total Recovered</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(0,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(0)}</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(1,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(1)}</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(2,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(2)}</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(3,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(3)}</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(4,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(4)}</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(5,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(5)}</th>\n\t\t\t\t\t\t\t<th class=\"sortheader\" onClick={()=>this.sortTable(6,2,document.getElementById(\"coronatable\").rows.length)}>{this.arrow(6)}</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{items.map(items =>        \n\t\t\t\t\t\t\t\t<tr class=\"sortrow\">\n\t\t\t\t\t\t\t\t\t<td>{items.Country}</td>\n\t\t\t\t\t\t\t\t\t<td>{items.NewConfirmed}</td>\n\t\t\t\t\t\t\t\t\t<td>{items.TotalConfirmed}</td>\n\t\t\t\t\t\t\t\t\t<td>{items.NewDeaths}</td>\n\t\t\t\t\t\t\t\t\t<td>{items.TotalDeaths}</td>\n\t\t\t\t\t\t\t\t\t<td>{items.NewRecovered}</td>\n\t\t\t\t\t\t\t\t\t<td>{items.TotalRecovered}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n  }\n\n}\n\nexport default Table;\n","import React, { Component } from 'react'\nimport './App.css';\n\nclass Header extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>COVID-19 Table</h1>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React, { Component } from 'react'\nimport Author from './Author';\nimport Table from './Table';\nimport Header from './Header';\nimport './App.css';\n\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Author/>\n\t\t\t\t<Header/>\n\t\t\t\t<Table/>\n\t\t\t</div>\n\t\t)\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}